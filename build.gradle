/*
 * Copyright 2012-2021 Mathias Herberts
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */


//
// Dependency on gradle-git to download juds to download juds
// @see https://github.com/ajoberstar/gradle-git
//

buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath 'org.ajoberstar:gradle-git:1.5.1'
  }
}

plugins {
  id 'java'
  id 'eclipse'
  id 'war'
  id 'maven-publish'
  id 'signing'
}

sourceCompatibility = 1.6

configurations {
  tools
  archives
  ossclient
}

import org.ajoberstar.grgit.*;

//
// Publishing infos
//

group = 'com.geoxp.oss'
version = '1.0.1'

//
// Retrieve/Configure/Build JUDS
//

task clonejuds {
  def destination = file('juds')
  if (!destination.exists()) {
    Grgit.clone(dir: file('juds'), uri: 'https://github.com/mcfunley/juds.git')
  }
}

task autoConfjuds(type: Exec, dependsOn: 'clonejuds') {
  workingDir './juds'
  if (!new File('./juds/juds-0.95.jar').exists()) {
    commandLine './autoconf.sh'
  } else {
    commandLine 'ls', 'juds-0.95.jar'
  }
}

task confjuds(type: Exec, dependsOn: 'autoConfjuds') {
  workingDir './juds'
  if (!new File('./juds/juds-0.95.jar').exists()) {
    commandLine './configure','CFLAGS=-I' + System.getProperty('java.home') + '/include'
  } else {
    commandLine 'ls', 'juds-0.95.jar'
  }
}

task buildjuds(type: Exec, dependsOn: 'confjuds') {
  workingDir './juds'
  if (!new File('./juds/juds-0.95.jar').exists()) {
    commandLine 'make'
  } else {
    commandLine 'ls', 'juds-0.95.jar'
  }
}

//
// Repositories for dependency resolution
//

repositories {
  mavenCentral()
}

//
// Project dependencies
//

dependencies {
  implementation group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.47'
  implementation group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.47'
  implementation group: 'org.bouncycastle', name: 'bcpg-jdk15on', version: '1.47'
  implementation group: 'javax.servlet', name: 'servlet-api', version: '2.5'
  implementation group: 'com.google.inject', name: 'guice', version: '3.0'
  implementation group: 'com.google.inject.extensions', name: 'guice-servlet', version: '3.0'
  implementation group: 'com.google.code.gson', name: 'gson', version: '2.2.2'
  implementation group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.2.5'
  implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.2.5'
  implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.6.6'
  implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.6.6'
  implementation group: 'org.apache.pig', name: 'pig', version: '0.8.0', transitive: false
  implementation group: 'org.apache.zookeeper', name: 'zookeeper', version: '3.3.5', transitive: false
  implementation group: 'org.apache.hadoop', name: 'hadoop-core', version: '0.20.2', transitive: false
  implementation group: 'log4j', name: 'log4j', version: '1.2.15', transitive: false
  
  implementation files('juds/juds-0.95.jar')
  
  tools files('tools/jarjar-1.4.jar')

  testImplementation group: 'junit', name: 'junit', version: '4.+'
}

war {
  ext.clspth = []

  for (f in classpath) {
    if (!f.toString().endsWith('juds-0.95.jar')) {
      ext.clspth.add(f)
    }
  }
  classpath = ext.clspth
}

test {
  scanForTestClasses = true

  //makes the standard streams (err and out) visible at console when running tests
  testLogging.showStandardStreams = true

  //listening to test execution events
  beforeTest { descriptor ->
     logger.lifecycle("Running test: " + descriptor)
  }
  onOutput { descriptor, event ->
     logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
  }
}

build.dependsOn {
  'buildjuds'
}

//
// Handly tasks to interact with an OSS
//

task(OSSGenMasterSecret, dependsOn: 'build', type: JavaExec) {
  doFirst {
    ext.props = ['oss.url', 'oss.pubring', 'oss.keyid', 'oss.k']
    for (prop in ext.props) {
      if (null == System.getProperty(prop)) {
        throw new RuntimeException('Usage: gradle -Doss.url=OSS_URL -Doss.pubring=PUBRING0,PUBRING1,... -Doss.keyid=KEYID0,KEYID1,... -Doss.k=K OSSGenMasterSecret')
      }
    }
  }
  main = 'com.geoxp.oss.client.OSSGenMasterSecret'
  classpath = sourceSets.main.runtimeClasspath
  args System.getProperty('oss.url',''), System.getProperty('oss.pubring',''), System.getProperty('oss.keyid',''), System.getProperty('oss.k','')
}

task(OSSInit, dependsOn: 'build') {
  doFirst { 
    ext.props = ['oss.url']
    for (prop in ext.props) {
      if (null == System.getProperty(prop)) {
        throw new RuntimeException('Usage: gradle -Doss.url=OSS_URL [-Doss.sshkey=SSH_KEY_FINGERPRINT] OSSInit\nPassing the raw init secret via stdin.')
      }
    }
    ext.cp = ''
    for(f in sourceSets.main.runtimeClasspath) {
      ext.cp = ext.cp + ':' + f
    }
    println 'To initialize OSS run the following command:'
    println ''
    println 'gpg -d XXXXXXXX.oss | java -cp build/libs/oss-client.jar com.geoxp.oss.client.OSSInit ' + System.getProperty('oss.url','') + ' ' + System.getProperty('oss.sshkey','')
  }
}

task(OSSPutSecret, dependsOn: 'build') {
  doFirst { 
    ext.props = ['oss.url','oss.secret']
    for (prop in ext.props) {
      if (null == System.getProperty(prop)) {
        throw new RuntimeException('Usage: gradle -Doss.url=OSS_URL -Doss.secret=SECRET_NAME [-Doss.sshkey=SSH_KEY_FINGERPRINT] OSSPutSecret\nPassing the secret to store via stdin.')
      }
    }
    println 'To store a secret, run the following command:'
    println ''
    println 'cat SECRET | java -cp build/libs/oss-client.jar com.geoxp.oss.client.OSSPutSecret ' + System.getProperty('oss.url','') + ' ' + System.getProperty('oss.secret','') + ' ' + System.getProperty('oss.sshkey','')
  }
}

task(OSSWrap, dependsOn: 'build') {
  doFirst { 
    ext.props = ['oss.url','oss.secret']
    for (prop in ext.props) {
      if (null == System.getProperty(prop)) {
        throw new RuntimeException('Usage: gradle -Doss.url=OSS_URL -Doss.secret=SECRET_NAME [-Doss.sshkey=SSH_KEY_FINGERPRINT] OSSWrap\nPassing data to wrap via stdin.\nSecret must be of length 128, 192 or 256 bits.')
      }
    }
    println 'To wrap data, run the following command:'
    println ''
    println 'cat DATA | java -cp build/libs/oss-client.jar com.geoxp.oss.client.OSSWrap ' + System.getProperty('oss.url','') + ' ' + System.getProperty('oss.secret','') + ' ' + System.getProperty('oss.sshkey','')
  }
}

task(OSSGenSecret, dependsOn: 'build', type: JavaExec) {
  doFirst { 
    ext.props = ['oss.url', 'oss.secret']
    for (prop in ext.props) {
      if (null == System.getProperty(prop)) {
        throw new RuntimeException('Usage: gradle -Doss.url=OSS_URL -Doss.secret=SECRET_NAME [-Doss.sshkey=SSH_KEY_FINGERPRINT] OSSGenSecret')
      }
    }
  }
  main = 'com.geoxp.oss.client.OSSGenSecret'
  classpath = sourceSets.main.runtimeClasspath
  args System.getProperty('oss.url',''), System.getProperty('oss.secret',''), System.getProperty('oss.sshkey','')
}

task(OSSGetSecret, dependsOn: 'build', type: JavaExec) {
  doFirst { 
    ext.props = ['oss.url', 'oss.secret']
    for (prop in ext.props) {
      if (null == System.getProperty(prop)) {
        throw new RuntimeException('Usage: gradle -Doss.url=OSS_URL -Doss.secret=SECRET_NAME [-Doss.sshkey=SSH_KEY_FINGERPRINT] OSSGetSecret')
      }
    }
  }
  main = 'com.geoxp.oss.client.OSSGetSecret'
  classpath = sourceSets.main.runtimeClasspath
  args System.getProperty('oss.url',''), System.getProperty('oss.secret',''), System.getProperty('oss.sshkey', '')
}

task ossClientJar(type: Jar, dependsOn: jar) {
  inputs.files jar.archivePath
  appendix = 'client'

  doLast {
    project.ant {
      taskdef name: "jarjar", classname: "com.tonicsystems.jarjar.JarJarTask", classpath: configurations.tools.asPath
      jarjar(jarfile: archivePath) {
        zipfileset(src: jar.archivePath) {
          exclude(name: 'com/geoxp/oss/servlet/**')
          exclude(name: 'com/geoxp/oss/OSS.class')
          exclude(name: 'com/geoxp/oss/OSS$*.class')
          exclude(name: 'com/geoxp/oss/KeyStore.class')
          exclude(name: 'com/geoxp/oss/DirectoryHierarchyKeyStore.class')
        }
        //sourceSets.main.allSource.findAll { file -> println 'FILE >>> ' + file }

        //
        // Iterate over .jar files
        //
        configurations.runtimeClasspath.files.findAll {file ->
          ['log4', 'hadoop-', 'pig-', 'slf4j-', 'servlet-api', 'guice-servlet', 'guice', 'javax.inject', 'aopalliance', 'asm'].every { !file.name.startsWith(it) }
        }.each {jarjarFile ->
          zipfileset(src: jarjarFile) {
            exclude(name: 'META-INF/**')
          }
        }

        rule pattern: "com.geoxp.oss.**", result: "@0"
        rule pattern: "com.etsy.net.**", result: '@0'
        rule pattern: "org.apache.pig.**", result: "@0"
        rule pattern: "org.apache.hadoop.**", result: "@0"
	rule pattern: "org.w3c.**", result: "@0"
	rule pattern: "org.xml.**", result: "@0"
	rule pattern: "org.apache.log4j.**", result: "@0"
        rule pattern: "org.**", result: "com.geoxp.oss.jarjar.@0"
        rule pattern: "net.**", result: "com.geoxp.oss.jarjar.@0"
        rule pattern: "com.**", result: "com.geoxp.oss.jarjar.@0"
      }
    }
  }
}


publish {
  dependsOn ossClientJar
}

task sourceJar(type: Jar) {
  archiveClassifier = "sources"
}

task javadocJar(type: Jar) {
  archiveClassifier = "javadoc"
}

publishing {
  publications {
    OSSClientPublication(MavenPublication) {
      artifactId = 'oss-client'
      artifact(file("${buildDir}/libs/oss-client-" + version + ".jar"))
      artifact sourceJar
      artifact javadocJar
      pom {
        name = 'Open Secret Server Client'
        // optionally artifactId can be defined here
        description = 'A java client for the Open Secret Server'
        url = 'https://github.com/hbs/oss'

        scm {
          connection = 'scm:git:git://github.com/hbs/oss.git'
          developerConnection = 'scm:git:git://github.com/hbs/oss.git'
          url = 'https://github.com/hbs/oss'
        }

        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id = 'herberts'
            name = 'Mathias Herberts'
            email = 'Mathias.Herberts@gmail.com'
          }
        }
      }
    }
  }
  repositories {
    maven {
      def stagingRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
      def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
      url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : stagingRepoUrl

      credentials {
        username = "ossrhUsername"
        password = "ossrhPassword"
      }
    }
  }
}


java {
  withJavadocJar()
  withSourcesJar()
}

javadoc {
  source = sourceSets.main.allJava
  classpath = configurations.compileClasspath

  options
  {
    setMemberLevel JavadocMemberLevel.PUBLIC
    setAuthor true

    links "https://docs.oracle.com/javase/8/docs/api/"
  }
}

artifacts {
  ossclient ossClientJar, javadocJar, sourcesJar
}

signing {
  useGpgCmd()
  sign publishing.publications.OSSClientPublication
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
